-module(handler).
-export([fetch/3, interval/4, fix_hashtag/1, mapreduce/2, mapreduceProfanity/1, maptags/3, redtags/2, go/0, store/0, timestamp/0, timestampYMD/0, retrieve_using_indexes/2, local_go/0]).

%% erl -pa /home/erlach/riak-erlang-client/ebin/ /home/erlach/riak-erlang-client/deps/*/ebin

%% Reload nodes, sudo dev1/bin/riak start and do it for all 5 nodes.
%% Add beam path file to all nodes, advance.config file.

%% To change secondary index config:
%% http://docs.basho.com/riak/latest/ops/advanced/configs/secondary-index/


store() -> 
	%% I = list_to_binary(integer_to_list(ID))
	%% "127.0.0.1", 10017, "129.16.155.22", 8087
	Timestamp = timestampYMD(),
	{ok, Pid} = riakc_pb_socket:start_link("129.16.155.22", 8087),

	Obj1 = riakc_obj:new(<<"Markus">>, <<"key1">>, {1, {}, ["beer", "bacon"]}),
	Obj2 = riakc_obj:new(<<"Markus">>, <<"key2">>, {2, {}, ["kebab", "pizza"]}),
	Obj3 = riakc_obj:new(<<"Markus">>, <<"key3">>, {3, {}, ["bacon", "hamburger"]}),

	MetaData1 = riakc_obj:get_update_metadata(Obj1),
	MetaData2 = riakc_obj:get_update_metadata(Obj2),
	MetaData3 = riakc_obj:get_update_metadata(Obj3),

	Obj1Secondary = riakc_obj:set_secondary_index(MetaData1, 
		[{{binary_index, "Timestamp"}, [Timestamp]}]),
	Obj2Secondary = riakc_obj:set_secondary_index(MetaData2, 
		[{{binary_index, "Timestamp"}, [Timestamp]}]),
	Obj3Secondary = riakc_obj:set_secondary_index(MetaData3, 
		[{{binary_index, "Timestamp"}, [<<"2014-11-26">>]}]),

	Obj1Upd = riakc_obj:update_metadata(Obj1, Obj1Secondary),
	Obj2Upd = riakc_obj:update_metadata(Obj2, Obj2Secondary),
	Obj3Upd = riakc_obj:update_metadata(Obj3, Obj3Secondary),

  	riakc_pb_socket:put(Pid, Obj1Upd),
  	riakc_pb_socket:put(Pid, Obj2Upd),
  	riakc_pb_socket:put(Pid, Obj3Upd).
  	%io:format("Stored, ~p~n", [Obj2Upd]).


%% Start riak and mapreduce
%% "127.0.0.1", 10017, "129.16.155.22", 8087
%% Keys = [{Bucket, Key}, {Bucket, Key}] i binär form.
%% Lägg till datum i iso format, Date = 2014-11-28 och gör binär.
go() -> 
	{ok, Pid} = riakc_pb_socket:start_link("129.16.155.22", 8087), 
	Bucket = <<"Final_Sprint">>,
	%Key = <<"">>,
	TimestampYMD = timestampYMD(),
	Timestamp_7_days_ago = timestamp_7_days_ago(),
 	%Keys1 = [{Bucket, <<"key1">>}, {Bucket, <<"key2">>}, {Bucket, <<"key3">>}],
	Range = interval(Pid, Bucket, TimestampYMD, Timestamp_7_days_ago),
	Keys = interval_keys(Range, Bucket),
	%KeysPro = excludeProfanity(Nagot, Bucket)
	Result = mapreduce(Pid, Keys),
	%ResultPro = mapreduceProfanity(Pid),
	sortList(Result).
	%sortList(ResultPro).
	

%% {538257293054181376,{},["MTVStars"]}
local_go() ->
	{ok, Pid} = riakc_pb_socket:start_link("127.0.0.1", 10017),
	Bucket = <<"Markus_Sec">>,
	%Key = <<"">>,
	TimestampYMD = timestampYMD(),
	Timestamp_7_days_ago = timestamp_7_days_ago(),
	Timestamp_30_days_ago = timestamp_30_days_ago(),
	Range = interval(Pid, Bucket, TimestampYMD, Timestamp_7_days_ago),
	%Keys1 = [{Bucket, <<"538257293088161795">>}, {Bucket, <<"538257288885436417">>}],
	Keys = interval_keys(Range, Bucket),
	%fetch(Pid, Bucket, Key).
	mapreduce(Pid, Keys).


%% Fetch value from key
fetch(Pid, Bucket, Key) -> 
	{ok, Fetched} = riakc_pb_socket:get(Pid, Bucket, Key),
	Value = riakc_obj:get_value(Fetched),
	{ok, binary_to_term(Value)}.


%% Mapreduce for counting tags.
mapreduce(Pid, Keys) -> 
	{ok, [{1, [Result]}]} = riakc_pb_socket:mapred(
                         Pid,
                         Keys,
                         [{map, {modfun, handler, maptags}, false, false},
                          {reduce, {modfun, handler, redtags}, none, true}]),
	dict:to_list(Result).


%% Extra mapreduce to remove profanity.
mapreduceProfanity(Pid) -> %Keys
	{ok, [{1, [Result]}]} = riakc_pb_socket:mapred(
                         Pid,
                         {<<"Final_Sprint">>, [[<<"matches">>, <<"porn">>]]},
                         [{map, {modfun, handler, maptags}, true, false},
                          {reduce, {modfun, handler, redtags}, none, true}]),
	dict:to_list(Result).

maptags(RiakObject, _, B) ->
	%[binary_to_term(riak_object:get_value(RiakObject))].
	{_, _, HashtagList} = binary_to_term(riak_object:get_value(RiakObject)),
	[dict:from_list([{I, 1} || I <- HashtagList])].

%	case B of
%		true -> 
%			{_, _, HashtagList} = binary_to_term(riak_object:get_value(RiakObject)), [dict:from_list([{I, 1} || I <- HashtagList])].
%		false ->
%			{_, _, HashtagList} = binary_to_term(riak_object:get_value(RiakObject)), [dict:from_list([{I, 1} || I <- HashtagList])].
%	end.

redtags(Input, _) ->
	[lists:foldl(
		fun(Tag, Acc) ->
			dict:merge(fun(_, Amount1, Amount2) ->
				Amount1 + Amount2 end, Tag, Acc) end, dict:new(),
			Input)].


%% Timestamp in year-month-day, hour:min:sec format
timestamp() ->
	{{Year, Month, Day}, {Hour, Min, Sec}} = calendar:local_time(),
    Format = "~4.10.0B-~2.10.0B-~2.10.0B ~2.10.0B:~2.10.0B:~2.10.0B",
    IsoFormat = io_lib:format(Format, [Year, Month, Day, Hour, Min, Sec]),
    list_to_binary(IsoFormat).


%% Timetamp in year-month-day format
timestampYMD() ->
	{{Year, Month, Day}, _} = calendar:local_time(),
    Format = "~4.10.0B-~2.10.0B-~2.10.0B",
    IsoFormat = io_lib:format(Format, [Year, Month, Day]),
    list_to_binary(IsoFormat).


%% Timestamp - 7 days.
timestamp_7_days_ago() ->
	{{Year, Month, Day}, _} = calendar:local_time(),
	calendar:gregorian_days_to_date(calendar:date_to_gregorian_days({Year, Month, Day}) - 7),
	Format = "~4.10.0B-~2.10.0B-~2.10.0B",
	IsoFormat = io_lib:format(Format, [Year, Month, Day]),
    list_to_binary(IsoFormat).


%% Timestamp - 30 days.
timestamp_30_days_ago() ->
	{{Year, Month, Day}, _} = calendar:local_time(),
	calendar:gregorian_days_to_date(calendar:date_to_gregorian_days({Year, Month, Day}) - 30),
	Format = "~4.10.0B-~2.10.0B-~2.10.0B",
	IsoFormat = io_lib:format(Format, [Year, Month, Day]),
    list_to_binary(IsoFormat).


%% Retrieve something in time interval
%% Spara tweets i iso format, kolla upp secondary indexes
interval(Pid, Bucket, TimestampYMD, Timestamp_7_days_ago) -> 
	{_, {_, Range, _, _}} =	riakc_pb_socket:get_index_range(Pid, Bucket, 
                                {binary_index, "Timestamp"}, 
                                Timestamp_7_days_ago, TimestampYMD), Range.

interval_keys(Range, Bucket) ->
	[{Bucket, Keys} || Keys <- Range].


%% Fixa lista med otillåtna ord
%excludeProfanity(Bucket) -> 
%	[{Bucket, [[<<"matches">>, Exclude]]} || Exclude <- ProfanityList].


%% This performs exact match index query using binary
%% Can change to integer_index
retrieve_using_indexes(Pid, Bucket) -> 
	riakc_pb_socket:get_index(Pid, Bucket,
		{binary_index, "TimeStamp"}, <<"2014-11-27">>). 



%% [{[{<<"text">>,<<"London">>},{<<"indices">>,[120,127]}]}]
%% [{[{<<"t">>,<<"hej">>}, {<<"i">>,""}]}, {[{<<"t">>,<<"hejda">>},{<<"i">>,""}]}]
fix_hashtag([]) -> [];
fix_hashtag([{[{_, Tag}, _]} | T]) -> [binary_to_list(Tag)|fix_hashtag(T)].	
	

%% Sorting in top10
sortList(Result)->
	Sort = lists:reverse(lists:keysort(2,Result)), 
	lists:sublist(Sort, 1, 10).


%% Storing the result from mapreduce
store([H|T]) ->
	case T of
		[]->io:format("done");
		_->
		{ok, Pid} = riakc_pb_socket:start_link("129.16.155.22", 8087), 
		{K,V} = hd([H|T]),
		Key = list_to_binary(K),
		Value = list_to_binary(integer_to_list(V)),
		Object = riakc_obj:new(<<"result">>,Key,Value),
		riakc_pb_socket:put(Pid, Object),
		io:format("Key is ~p~n",[K]),
		io:format("Value is ~p~n",[V]),
		store(T)
	end.


%% ProfanityList = [<<"porn">>, <<"sex">>, <<"pussy">>, <<"dick">>, <<"cum">>, <<"cumshot">>, <<"fuck">>, <<"fucking">>].
