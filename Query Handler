-module(handler).
-export([fetch/0, sort/1, send/1, interval/1, fix_hashtag/1, fix_timestamp/1, print/0, mapreduce/2, maptags/3, redtags/2, go/0, store/0]).

%% erl -pa /home/erlach/riak-erlang-client/ebin/ /home/erlach/riak-erlang-client/deps/*/ebin
%% Reload nodes, sudo dev1/bin/riak start and do it for all 5

%% Fetch value from key
fetch() -> ok.
	%% {ok, Fetched} = riakc_pb_socket:get(Pid, <<"bucket">>, I).
	%% {ok, Fetch} = riakc_obj:get_value(Fetched).
store() -> 
	%% I = list_to_binary(integer_to_list(ID))
	{ok, Pid} = riakc_pb_socket:start_link("127.0.0.1", 10017),

	Obj1 = riakc_obj:new(<<"Test">>, <<"key1">>, {1, {2014}, ["mat", "hej"]}),
	Obj2 = riakc_obj:new(<<"Test">>, <<"key2">>, {2, {2014}, ["ma", "hej"]}),
	Obj3 = riakc_obj:new(<<"Test">>, <<"key3">>, {3, {2014}, ["mt", "hej"]}),

  	riakc_pb_socket:put(Pid, Obj1),
  	riakc_pb_socket:put(Pid, Obj2),
  	riakc_pb_socket:put(Pid, Obj3).


%% Start riak and mapreduce
go() ->
	{ok, Pid} = riakc_pb_socket:start_link("127.0.0.1", 10017),
%	Keys = [{<<"bucket">>, <<"key">>}, {<<"bucket">>, <<"key">>}, {<<"bucket">>, <<"key">>}],
	Keys = [{<<"Test">>, <<"key1">>}, {<<"Test">>, <<"key2">>}, {<<"Test">>, <<"key3">>}],
	mapreduce(Pid, Keys).


%% Implement map/reduce for counting tags 
mapreduce(Pid, Keys) -> 
	{ok, [{1, [Result]}]} = riakc_pb_socket:mapred(
                         Pid,
                         Keys,
                         [{map, {modfun, handler, maptags}, none, false},
                          {reduce, {modfun, handler, redtags}, none, true}]),
	dict:to_list(Result).


maptags(RiakObject, _, _) ->
	%[binary_to_term(riak_object:get_value(RiakObject))].
	{_, _, HashtagList} = binary_to_term(riak_object:get_value(RiakObject)),
	[dict:from_list([{I, 1} || I <- HashtagList])].


redtags(Input, _) ->
	[lists:foldl(
		fun(Tag, Acc) ->
			dict:merge(fun(_, Amount1, Amount2) ->
				Amount1 + Amount2 end, Tag, Acc) end, dict:new(),
			Input)].


%% Retrieve something in time interval
%% Spara tweets i iso format, kolla upp secondary indexes
interval(Dates) ->  ok. % fixa timestsmp
%	riakc_pb_socket:get_index_range(Pid, OrderBucket, 
%                                {binary_index, "TimeStamp"}, 
%                                <<"Date 1">>, <<"Date 2">>).


%% [{[{<<"text">>,<<"London">>},{<<"indices">>,[120,127]}]}]
%% [{[{<<"t">>,<<"hej">>}, {<<"i">>,""}]}, {[{<<"t">>,<<"hejda">>},{<<"i">>,""}]}]
fix_hashtag([]) -> [];
fix_hashtag([{[{_, Tag}, _]} | T]) -> [binary_to_list(Tag)|fix_hashtag(T)].	
	

%% <<"Mon Sep 20 05:31:30 +0000 2010">>
fix_timestamp(TimeStamp) -> 
	Year = string:substr(TimeStamp, 27, 4),
	Year1 = list_to_integer(Year),
	Month =	case string:substr(TimeStamp, 5, 3) of
		"Jan" -> 1;
		"Feb" -> 2;
		"Mar" -> 3;
		"Apr" -> 4;
		"May" -> 5;
		"Jun" -> 6;
		"Jul" -> 7;
		"Aug" -> 8;
		"Sep" -> 9;
		"Oct" -> 10;
		"Nov" -> 11;
		"Dec" -> 12
	end,
	Day = string:substr(TimeStamp, 9, 2),
	Day1 = list_to_integer(Day),
	Stamp = {Year1, Month, Day1}.	


sort(N) -> ok.


print() -> io:format("Fetched data: ~p~n", []).


send(N) -> ok.
