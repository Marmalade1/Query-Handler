-module(handler).
-export([fetch/0, interval/1, fix_hashtag/1, fix_timestamp/1, mapreduce/2, maptags/3, redtags/2, go/0, store/0, timestamp/0, timestampYMD/0, metaData/0, save_tweet/2]).

%% erl -pa /home/erlach/riak-erlang-client/ebin/ /home/erlach/riak-erlang-client/deps/*/ebin

%% Reload nodes, sudo dev1/bin/riak start and do it for all 5 nodes.
%% Add beam path file to all nodes, advance.config file.

%% To change secondary index config:
%% http://docs.basho.com/riak/latest/ops/advanced/configs/secondary-index/



%% Fetch value from key
fetch() -> ok.
	%% {ok, Fetched} = riakc_pb_socket:get(Pid, <<"bucket">>, I).
	%% {ok, Fetch} = riakc_obj:get_value(Fetched).
store() -> 
	%% I = list_to_binary(integer_to_list(ID))
	{ok, Pid} = riakc_pb_socket:start_link("127.0.0.1", 10017),

	Obj1 = riakc_obj:new(<<"Test">>, <<"key1">>, {1, {2014}, ["mat", "hej"]}),
	Obj2 = riakc_obj:new(<<"Test">>, <<"key2">>, {2, {2014}, ["ma", "hej"]}),
	Obj3 = riakc_obj:new(<<"Test">>, <<"key3">>, {3, {2014}, ["mt", "hej"]}),

  	riakc_pb_socket:put(Pid, Obj1),
  	riakc_pb_socket:put(Pid, Obj2),
  	riakc_pb_socket:put(Pid, Obj3).


%% Start riak and mapreduce
go() ->
	{ok, Pid} = riakc_pb_socket:start_link("127.0.0.1", 10017),
%	Keys = [{<<"bucket">>, <<"key">>}, {<<"bucket">>, <<"key">>}, {<<"bucket">>, <<"key">>}],
	Keys = [{<<"Test">>, <<"key1">>}, {<<"Test">>, <<"key2">>}, {<<"Test">>, <<"key3">>}],
	mapreduce(Pid, Keys).


%% Implement map/reduce for counting tags 
mapreduce(Pid, Keys) -> 
	{ok, [{1, [Result]}]} = riakc_pb_socket:mapred(
                         Pid,
                         Keys,
                         [{map, {modfun, handler, maptags}, none, false},
                          {reduce, {modfun, handler, redtags}, none, true}]),
	dict:to_list(Result).


maptags(RiakObject, _, _) ->
	%[binary_to_term(riak_object:get_value(RiakObject))].
	{_, _, HashtagList} = binary_to_term(riak_object:get_value(RiakObject)),
	[dict:from_list([{I, 1} || I <- HashtagList])].


redtags(Input, _) ->
	[lists:foldl(
		fun(Tag, Acc) ->
			dict:merge(fun(_, Amount1, Amount2) ->
				Amount1 + Amount2 end, Tag, Acc) end, dict:new(),
			Input)].

%% Timestamp in year-month-day, hour:min:sec format
timestamp() ->
	{{Year, Month, Day}, {Hour, Min, Sec}} = calendar:local_time(),
    Format = "~4.10.0B-~2.10.0B-~2.10.0B ~2.10.0B:~2.10.0B:~2.10.0B",
    IsoFormat = io_lib:format(Format, [Year, Month, Day, Hour, Min, Sec]),
    list_to_binary(IsoFormat).

%% Timetamp in year-month-day format
timestampYMD() ->
	{{Year, Month, Day}, _} = calendar:local_time(),
    Format = "~4.10.0B-~2.10.0B-~2.10.0B",
    IsoFormat = io_lib:format(Format, [Year, Month, Day]),
    list_to_binary(IsoFormat).


metaData() ->
	dict:store(<<"timestamp">>, [{"timestamp_bin", timestampYMD()}]), dict:new().


%% Retrieve something in time interval
%% Spara tweets i iso format, kolla upp secondary indexes
%% Bucket kan vara i format, buckettype, bucket som retrieve_using_indexes
interval(Dates) -> 
	riakc_pb_socket:get_index_range(Pid, Bucket, 
                                {binary_index, "TimeStamp"}, 
                                <<"2014-11-24">>, <<"2014-11-25">>).

%% This performs exact match index query using binary
retrieve_using_indexes() -> %% bucket type and bucket name
	riakc_pb_socket:get_index(Pid, {<<"mytype">>, <<"mybucket">>}, 
		{binary_index, "TimeStamp"}, <<"2014-11-25">>). %% Can change to integer_index


%% [{[{<<"text">>,<<"London">>},{<<"indices">>,[120,127]}]}]
%% [{[{<<"t">>,<<"hej">>}, {<<"i">>,""}]}, {[{<<"t">>,<<"hejda">>},{<<"i">>,""}]}]
fix_hashtag([]) -> [];
fix_hashtag([{[{_, Tag}, _]} | T]) -> [binary_to_list(Tag)|fix_hashtag(T)].	
	

%% <<"Mon Sep 20 05:31:30 +0000 2010">>
fix_timestamp(TimeStamp) -> 
	Year = string:substr(TimeStamp, 27, 4),
	Year1 = list_to_integer(Year),
	Month =	case string:substr(TimeStamp, 5, 3) of
		"Jan" -> 1;
		"Feb" -> 2;
		"Mar" -> 3;
		"Apr" -> 4;
		"May" -> 5;
		"Jun" -> 6;
		"Jul" -> 7;
		"Aug" -> 8;
		"Sep" -> 9;
		"Oct" -> 10;
		"Nov" -> 11;
		"Dec" -> 12
	end,
	Day = string:substr(TimeStamp, 9, 2),
	Day1 = list_to_integer(Day),
	Stamp = {Year1, Month, Day1}.	


print() -> io:format("Fetched data: ~p~n", []).


%% Save tweet with updated secondary index
%% Not yet tested
save_tweet(R, {parsed_tweet, _L, B, {id, I}}) ->

	Obj = riakc_obj:new(<<"tweets">>, list_to_binary(integer_to_list(I)), B),
	Timestamp = timestamp(),
	MetaData = riakc_obj:get_update_metadata(Obj),
	ObjSecondary = riakc_obj:set_secondary_index(MetaData, 
		[{{binary_index, "Timestamp"}, [Timestamp]}]),
	NewObj = riakc_obj:update_metadata(Obj, ObjSecondary),
	riakc_pb_socket:put(R, NewObj);

save_tweet(_, _) -> ok.


 %erl -pa /home/erlach/riak-erlang-client/ebin/ riak-erlang-client/deps/*/ebin

